{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 1,
    "pending": 0,
    "failures": 1,
    "start": "2021-03-08T03:58:38.682Z",
    "end": "2021-03-08T03:59:29.096Z",
    "duration": 50414,
    "testsRegistered": 2,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b7b9af04-08e3-45c8-a20a-942ce8f9deff",
      "title": "",
      "fullFile": "cypress/integration/plan-page/plan-page.spec.js",
      "file": "cypress/integration/plan-page/plan-page.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83cf8fb8-569f-463c-8cb7-3e42623972ea",
          "title": "Select Plans",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should select multiple plan combinations for HelloFresh AU",
              "fullTitle": "Select Plans should select multiple plan combinations for HelloFresh AU",
              "timedOut": null,
              "duration": 13075,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// data driven preferences\nvar preferences = [{\n  id: \"chefschoice\"\n}, {\n  id: \"veggie\"\n}, {\n  id: \"family\"\n}, {\n  id: \"lowcalorie\"\n}];\nvar planPage = new _PlanPage[\"default\"]();\nplanPage.visitAU(); // assert that the plan widget exists in the DOM and is visible\nplanPage.getPlans().should('exist');\nplanPage.getPlans().should('be.visible'); // click through each preference on the page\ncy.wrap(preferences).each(function (preference) {\n  // assert that each preference exists in the DOM and is visible\n  // before clicking on it\n  planPage.selectYourPreference(preference.id).should('exist');\n  planPage.selectYourPreference(preference.id).should('be.visible');\n  planPage.selectYourPreference(preference.id).click(); // clicks through all Number of People options\n  planPage.selectAllPeople(); // clicks through all Recipes per Week options\n  planPage.selectAllRecipes(); // check that Price Per Serving is not empty\n  // and log the price\n  planPage.getPrice().should('not.be.empty');\n  planPage.getPrice().then(function ($price) {\n    cy.log($price.text());\n  }); // check that Shipping cost is not empty\n  // and log the shipping cost\n  planPage.getShippingCost().should('not.be.empty');\n  planPage.getShippingCost().then(function ($shipping) {\n    cy.log($shipping.text());\n  });\n});",
              "err": {
                "message": "CypressError: Timed out retrying after 4050ms: `cy.click()` failed because this element:\n\n`<button data-test-id=\"classic-box-t10-chefschoice\" data-test-is-active=\"true\" class=\"dsbx dsdq dsdr dsds dsdt dsdu dsdv dsdw dsdx dsdy dsdz dsea dseb dsec dsed dsee\">...</button>`\n\nis being covered by another element:\n\n`<div class=\"go1358372979\" role=\"button\" tabindex=\"0\"></div>`\n\nFix this problem, or use {force: true} to disable error checking.\n\nhttps://on.cypress.io/element-cannot-be-interacted-with",
                "estack": "CypressError: Timed out retrying after 4050ms: `cy.click()` failed because this element:\n\n`<button data-test-id=\"classic-box-t10-chefschoice\" data-test-is-active=\"true\" class=\"dsbx dsdq dsdr dsds dsdt dsdu dsdv dsdw dsdx dsdy dsdz dsea dseb dsec dsed dsee\">...</button>`\n\nis being covered by another element:\n\n`<div class=\"go1358372979\" role=\"button\" tabindex=\"0\"></div>`\n\nFix this problem, or use {force: true} to disable error checking.\n\nhttps://on.cypress.io/element-cannot-be-interacted-with\n    at $Cy.ensureDescendents (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:162656:26)\n    at ensureDescendents (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:151114:8)\n    at ensureDescendentsAndScroll (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:151121:14)\n    at ensureElIsNotCovered (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:151255:5)\n    at runAllChecks (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:151404:52)\n    at retryActionability (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:151427:16)\n    at tryCatcher (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:10765:23)\n    at Function.Promise.attempt.Promise.try (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:8039:29)\n    at tryFn (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:167007:21)\n    at whenStable (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:167045:12)\n    at https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:166540:16\n    at tryCatcher (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:10765:23)\n    at Promise._settlePromiseFromHandler (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:8700:31)\n    at Promise._settlePromise (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:8757:18)\n    at Promise._settlePromise0 (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:8802:10)\n    at Promise._settlePromises (https://www.hellofresh.com.au/__cypress/runner/cypress_runner.js:8882:18)\nFrom Your Spec Code:\n    at Context.eval (https://www.hellofresh.com.au/__cypress/tests?p=cypress/integration/plan-page/plan-page.spec.js:191:52)",
                "diff": null
              },
              "uuid": "524b9643-86d4-45c4-a01b-8536c7277303",
              "parentUUID": "83cf8fb8-569f-463c-8cb7-3e42623972ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should select multiple plan combinations for HelloFresh US",
              "fullTitle": "Select Plans should select multiple plan combinations for HelloFresh US",
              "timedOut": null,
              "duration": 29218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// data driven preferences\nvar preferences = [{\n  id: \"chefschoice\"\n}, {\n  id: \"veggie\"\n}, {\n  id: \"family\"\n}, {\n  id: \"fit\"\n}, {\n  id: \"quick\"\n}, {\n  id: \"pescatarian\"\n}];\nvar planPage = new _PlanPage[\"default\"]();\nplanPage.visitUS(); // assert that the plan widget exists in the DOM and is visible\nplanPage.getPlans().should('exist');\nplanPage.getPlans().should('be.visible'); // click through each preference on the page\ncy.wrap(preferences).each(function (preference) {\n  // assert that each preference exists in the DOM and is visible\n  // before clicking on it\n  planPage.selectYourPreference(preference.id).should('exist');\n  planPage.selectYourPreference(preference.id).should('be.visible');\n  planPage.selectYourPreference(preference.id).click(); // clicks through all Number of People options\n  planPage.selectAllPeople(); // clicks through all Recipes per Week options\n  planPage.selectAllRecipes(); // check that Price Per Serving is not empty\n  // and log the price\n  planPage.getPrice().should('not.be.empty');\n  planPage.getPrice().then(function ($price) {\n    cy.log($price.text());\n  }); // check that Shipping cost is not empty\n  // and log the shipping cost\n  planPage.getShippingCost().should('not.be.empty');\n  planPage.getShippingCost().then(function ($shipping) {\n    cy.log($shipping.text());\n  });\n});",
              "err": {},
              "uuid": "ebbcd608-bcf1-4651-9552-2bccdd2b2d2d",
              "parentUUID": "83cf8fb8-569f-463c-8cb7-3e42623972ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ebbcd608-bcf1-4651-9552-2bccdd2b2d2d"
          ],
          "failures": [
            "524b9643-86d4-45c4-a01b-8536c7277303"
          ],
          "pending": [],
          "skipped": [],
          "duration": 42293,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.0.1"
    }
  }
}